// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/19/2024 20:27:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    matriz
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module matriz_vlg_sample_tst(
	clk,
	Linea,
	Muro,
	reset,
	sampler_tx
);
input  clk;
input  Linea;
input  Muro;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or Linea or Muro or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module matriz_vlg_check_tst (
	Abajo,
	accion_out,
	actual,
	Adelante,
	Arriba,
	Atras,
	C0,
	c1,
	C2,
	C3,
	C4,
	C5,
	C6,
	C7,
	C8,
	C9,
	C10,
	C11,
	C12,
	C13,
	C14,
	C15,
	CE1,
	D_Abajo,
	D_Adelante,
	D_Arriba,
	D_Atras,
	dir_Abajo,
	dir_Adelante,
	dir_Arriba,
	dir_Atras,
	ena_Ab,
	ena_Ad,
	ena_Ar,
	ena_At,
	fin,
	H,
	Hab_accion,
	Hab_Actual,
	Hab_muro,
	Hab_sentido,
	MD,
	MI,
	sentido,
	sentido_nw,
	Y15,
	sampler_rx
);
input [3:0] Abajo;
input [1:0] accion_out;
input [3:0] actual;
input [3:0] Adelante;
input [3:0] Arriba;
input [3:0] Atras;
input [3:0] C0;
input  c1;
input [3:0] C2;
input [3:0] C3;
input [3:0] C4;
input [3:0] C5;
input [3:0] C6;
input [3:0] C7;
input [3:0] C8;
input [3:0] C9;
input [3:0] C10;
input [3:0] C11;
input [3:0] C12;
input [3:0] C13;
input [3:0] C14;
input [3:0] C15;
input [3:0] CE1;
input  D_Abajo;
input  D_Adelante;
input  D_Arriba;
input  D_Atras;
input [3:0] dir_Abajo;
input [3:0] dir_Adelante;
input [3:0] dir_Arriba;
input [3:0] dir_Atras;
input  ena_Ab;
input  ena_Ad;
input  ena_Ar;
input  ena_At;
input  fin;
input [1:0] H;
input  Hab_accion;
input  Hab_Actual;
input  Hab_muro;
input  Hab_sentido;
input [1:0] MD;
input [1:0] MI;
input [1:0] sentido;
input [1:0] sentido_nw;
input  Y15;
input sampler_rx;

reg [3:0] Abajo_expected;
reg [1:0] accion_out_expected;
reg [3:0] actual_expected;
reg [3:0] Adelante_expected;
reg [3:0] Arriba_expected;
reg [3:0] Atras_expected;
reg [3:0] C0_expected;
reg  c1_expected;
reg [3:0] C2_expected;
reg [3:0] C3_expected;
reg [3:0] C4_expected;
reg [3:0] C5_expected;
reg [3:0] C6_expected;
reg [3:0] C7_expected;
reg [3:0] C8_expected;
reg [3:0] C9_expected;
reg [3:0] C10_expected;
reg [3:0] C11_expected;
reg [3:0] C12_expected;
reg [3:0] C13_expected;
reg [3:0] C14_expected;
reg [3:0] C15_expected;
reg [3:0] CE1_expected;
reg  D_Abajo_expected;
reg  D_Adelante_expected;
reg  D_Arriba_expected;
reg  D_Atras_expected;
reg [3:0] dir_Abajo_expected;
reg [3:0] dir_Adelante_expected;
reg [3:0] dir_Arriba_expected;
reg [3:0] dir_Atras_expected;
reg  ena_Ab_expected;
reg  ena_Ad_expected;
reg  ena_Ar_expected;
reg  ena_At_expected;
reg  fin_expected;
reg [1:0] H_expected;
reg  Hab_accion_expected;
reg  Hab_Actual_expected;
reg  Hab_muro_expected;
reg  Hab_sentido_expected;
reg [1:0] MD_expected;
reg [1:0] MI_expected;
reg [1:0] sentido_expected;
reg [1:0] sentido_nw_expected;
reg  Y15_expected;

reg [3:0] Abajo_prev;
reg [1:0] accion_out_prev;
reg [3:0] actual_prev;
reg [3:0] Adelante_prev;
reg [3:0] Arriba_prev;
reg [3:0] Atras_prev;
reg [3:0] C0_prev;
reg  c1_prev;
reg [3:0] C2_prev;
reg [3:0] C3_prev;
reg [3:0] C4_prev;
reg [3:0] C5_prev;
reg [3:0] C6_prev;
reg [3:0] C7_prev;
reg [3:0] C8_prev;
reg [3:0] C9_prev;
reg [3:0] C10_prev;
reg [3:0] C11_prev;
reg [3:0] C12_prev;
reg [3:0] C13_prev;
reg [3:0] C14_prev;
reg [3:0] C15_prev;
reg [3:0] CE1_prev;
reg  D_Abajo_prev;
reg  D_Adelante_prev;
reg  D_Arriba_prev;
reg  D_Atras_prev;
reg [3:0] dir_Abajo_prev;
reg [3:0] dir_Adelante_prev;
reg [3:0] dir_Arriba_prev;
reg [3:0] dir_Atras_prev;
reg  ena_Ab_prev;
reg  ena_Ad_prev;
reg  ena_Ar_prev;
reg  ena_At_prev;
reg  fin_prev;
reg [1:0] H_prev;
reg  Hab_accion_prev;
reg  Hab_Actual_prev;
reg  Hab_muro_prev;
reg  Hab_sentido_prev;
reg [1:0] MD_prev;
reg [1:0] MI_prev;
reg [1:0] sentido_prev;
reg [1:0] sentido_nw_prev;
reg  Y15_prev;

reg [1:0] accion_out_expected_prev;
reg  Hab_accion_expected_prev;
reg  Hab_Actual_expected_prev;
reg  Hab_muro_expected_prev;
reg  Hab_sentido_expected_prev;
reg [1:0] MD_expected_prev;
reg [1:0] MI_expected_prev;

reg [1:0] last_accion_out_exp;
reg  last_Hab_accion_exp;
reg  last_Hab_Actual_exp;
reg  last_Hab_muro_exp;
reg  last_Hab_sentido_exp;
reg [1:0] last_MD_exp;
reg [1:0] last_MI_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:46] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 46'b1;
end

// update real /o prevs

always @(trigger)
begin
	Abajo_prev = Abajo;
	accion_out_prev = accion_out;
	actual_prev = actual;
	Adelante_prev = Adelante;
	Arriba_prev = Arriba;
	Atras_prev = Atras;
	C0_prev = C0;
	c1_prev = c1;
	C2_prev = C2;
	C3_prev = C3;
	C4_prev = C4;
	C5_prev = C5;
	C6_prev = C6;
	C7_prev = C7;
	C8_prev = C8;
	C9_prev = C9;
	C10_prev = C10;
	C11_prev = C11;
	C12_prev = C12;
	C13_prev = C13;
	C14_prev = C14;
	C15_prev = C15;
	CE1_prev = CE1;
	D_Abajo_prev = D_Abajo;
	D_Adelante_prev = D_Adelante;
	D_Arriba_prev = D_Arriba;
	D_Atras_prev = D_Atras;
	dir_Abajo_prev = dir_Abajo;
	dir_Adelante_prev = dir_Adelante;
	dir_Arriba_prev = dir_Arriba;
	dir_Atras_prev = dir_Atras;
	ena_Ab_prev = ena_Ab;
	ena_Ad_prev = ena_Ad;
	ena_Ar_prev = ena_Ar;
	ena_At_prev = ena_At;
	fin_prev = fin;
	H_prev = H;
	Hab_accion_prev = Hab_accion;
	Hab_Actual_prev = Hab_Actual;
	Hab_muro_prev = Hab_muro;
	Hab_sentido_prev = Hab_sentido;
	MD_prev = MD;
	MI_prev = MI;
	sentido_prev = sentido;
	sentido_nw_prev = sentido_nw;
	Y15_prev = Y15;
end

// update expected /o prevs

always @(trigger)
begin
	accion_out_expected_prev = accion_out_expected;
	Hab_accion_expected_prev = Hab_accion_expected;
	Hab_Actual_expected_prev = Hab_Actual_expected;
	Hab_muro_expected_prev = Hab_muro_expected;
	Hab_sentido_expected_prev = Hab_sentido_expected;
	MD_expected_prev = MD_expected;
	MI_expected_prev = MI_expected;
end


// expected MD[ 1 ]
initial
begin
	MD_expected[1] = 1'bX;
end 
// expected MD[ 0 ]
initial
begin
	MD_expected[0] = 1'bX;
end 
// expected MI[ 1 ]
initial
begin
	MI_expected[1] = 1'bX;
end 
// expected MI[ 0 ]
initial
begin
	MI_expected[0] = 1'bX;
end 
// expected accion_out[ 1 ]
initial
begin
	accion_out_expected[1] = 1'bX;
end 
// expected accion_out[ 0 ]
initial
begin
	accion_out_expected[0] = 1'bX;
end 

// expected Hab_accion
initial
begin
	Hab_accion_expected = 1'bX;
end 

// expected Hab_Actual
initial
begin
	Hab_Actual_expected = 1'bX;
end 

// expected Hab_muro
initial
begin
	Hab_muro_expected = 1'bX;
end 

// expected Hab_sentido
initial
begin
	Hab_sentido_expected = 1'bX;
end 
// generate trigger
always @(Abajo_expected or Abajo or accion_out_expected or accion_out or actual_expected or actual or Adelante_expected or Adelante or Arriba_expected or Arriba or Atras_expected or Atras or C0_expected or C0 or c1_expected or c1 or C2_expected or C2 or C3_expected or C3 or C4_expected or C4 or C5_expected or C5 or C6_expected or C6 or C7_expected or C7 or C8_expected or C8 or C9_expected or C9 or C10_expected or C10 or C11_expected or C11 or C12_expected or C12 or C13_expected or C13 or C14_expected or C14 or C15_expected or C15 or CE1_expected or CE1 or D_Abajo_expected or D_Abajo or D_Adelante_expected or D_Adelante or D_Arriba_expected or D_Arriba or D_Atras_expected or D_Atras or dir_Abajo_expected or dir_Abajo or dir_Adelante_expected or dir_Adelante or dir_Arriba_expected or dir_Arriba or dir_Atras_expected or dir_Atras or ena_Ab_expected or ena_Ab or ena_Ad_expected or ena_Ad or ena_Ar_expected or ena_Ar or ena_At_expected or ena_At or fin_expected or fin or H_expected or H or Hab_accion_expected or Hab_accion or Hab_Actual_expected or Hab_Actual or Hab_muro_expected or Hab_muro or Hab_sentido_expected or Hab_sentido or MD_expected or MD or MI_expected or MI or sentido_expected or sentido or sentido_nw_expected or sentido_nw or Y15_expected or Y15)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Abajo = %b | expected accion_out = %b | expected actual = %b | expected Adelante = %b | expected Arriba = %b | expected Atras = %b | expected C0 = %b | expected c1 = %b | expected C2 = %b | expected C3 = %b | expected C4 = %b | expected C5 = %b | expected C6 = %b | expected C7 = %b | expected C8 = %b | expected C9 = %b | expected C10 = %b | expected C11 = %b | expected C12 = %b | expected C13 = %b | expected C14 = %b | expected C15 = %b | expected CE1 = %b | expected D_Abajo = %b | expected D_Adelante = %b | expected D_Arriba = %b | expected D_Atras = %b | expected dir_Abajo = %b | expected dir_Adelante = %b | expected dir_Arriba = %b | expected dir_Atras = %b | expected ena_Ab = %b | expected ena_Ad = %b | expected ena_Ar = %b | expected ena_At = %b | expected fin = %b | expected H = %b | expected Hab_accion = %b | expected Hab_Actual = %b | expected Hab_muro = %b | expected Hab_sentido = %b | expected MD = %b | expected MI = %b | expected sentido = %b | expected sentido_nw = %b | expected Y15 = %b | ",Abajo_expected_prev,accion_out_expected_prev,actual_expected_prev,Adelante_expected_prev,Arriba_expected_prev,Atras_expected_prev,C0_expected_prev,c1_expected_prev,C2_expected_prev,C3_expected_prev,C4_expected_prev,C5_expected_prev,C6_expected_prev,C7_expected_prev,C8_expected_prev,C9_expected_prev,C10_expected_prev,C11_expected_prev,C12_expected_prev,C13_expected_prev,C14_expected_prev,C15_expected_prev,CE1_expected_prev,D_Abajo_expected_prev,D_Adelante_expected_prev,D_Arriba_expected_prev,D_Atras_expected_prev,dir_Abajo_expected_prev,dir_Adelante_expected_prev,dir_Arriba_expected_prev,dir_Atras_expected_prev,ena_Ab_expected_prev,ena_Ad_expected_prev,ena_Ar_expected_prev,ena_At_expected_prev,fin_expected_prev,H_expected_prev,Hab_accion_expected_prev,Hab_Actual_expected_prev,Hab_muro_expected_prev,Hab_sentido_expected_prev,MD_expected_prev,MI_expected_prev,sentido_expected_prev,sentido_nw_expected_prev,Y15_expected_prev);
	$display("| real Abajo = %b | real accion_out = %b | real actual = %b | real Adelante = %b | real Arriba = %b | real Atras = %b | real C0 = %b | real c1 = %b | real C2 = %b | real C3 = %b | real C4 = %b | real C5 = %b | real C6 = %b | real C7 = %b | real C8 = %b | real C9 = %b | real C10 = %b | real C11 = %b | real C12 = %b | real C13 = %b | real C14 = %b | real C15 = %b | real CE1 = %b | real D_Abajo = %b | real D_Adelante = %b | real D_Arriba = %b | real D_Atras = %b | real dir_Abajo = %b | real dir_Adelante = %b | real dir_Arriba = %b | real dir_Atras = %b | real ena_Ab = %b | real ena_Ad = %b | real ena_Ar = %b | real ena_At = %b | real fin = %b | real H = %b | real Hab_accion = %b | real Hab_Actual = %b | real Hab_muro = %b | real Hab_sentido = %b | real MD = %b | real MI = %b | real sentido = %b | real sentido_nw = %b | real Y15 = %b | ",Abajo_prev,accion_out_prev,actual_prev,Adelante_prev,Arriba_prev,Atras_prev,C0_prev,c1_prev,C2_prev,C3_prev,C4_prev,C5_prev,C6_prev,C7_prev,C8_prev,C9_prev,C10_prev,C11_prev,C12_prev,C13_prev,C14_prev,C15_prev,CE1_prev,D_Abajo_prev,D_Adelante_prev,D_Arriba_prev,D_Atras_prev,dir_Abajo_prev,dir_Adelante_prev,dir_Arriba_prev,dir_Atras_prev,ena_Ab_prev,ena_Ad_prev,ena_Ar_prev,ena_At_prev,fin_prev,H_prev,Hab_accion_prev,Hab_Actual_prev,Hab_muro_prev,Hab_sentido_prev,MD_prev,MI_prev,sentido_prev,sentido_nw_prev,Y15_prev);
`endif
	if (
		( accion_out_expected_prev[0] !== 1'bx ) && ( accion_out_prev[0] !== accion_out_expected_prev[0] )
		&& ((accion_out_expected_prev[0] !== last_accion_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accion_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accion_out_expected_prev);
		$display ("     Real value = %b", accion_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accion_out_exp[0] = accion_out_expected_prev[0];
	end
	if (
		( accion_out_expected_prev[1] !== 1'bx ) && ( accion_out_prev[1] !== accion_out_expected_prev[1] )
		&& ((accion_out_expected_prev[1] !== last_accion_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accion_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accion_out_expected_prev);
		$display ("     Real value = %b", accion_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accion_out_exp[1] = accion_out_expected_prev[1];
	end
	if (
		( Hab_accion_expected_prev !== 1'bx ) && ( Hab_accion_prev !== Hab_accion_expected_prev )
		&& ((Hab_accion_expected_prev !== last_Hab_accion_exp) ||
			on_first_change[38])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hab_accion :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hab_accion_expected_prev);
		$display ("     Real value = %b", Hab_accion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[38] = 1'b0;
		last_Hab_accion_exp = Hab_accion_expected_prev;
	end
	if (
		( Hab_Actual_expected_prev !== 1'bx ) && ( Hab_Actual_prev !== Hab_Actual_expected_prev )
		&& ((Hab_Actual_expected_prev !== last_Hab_Actual_exp) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hab_Actual :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hab_Actual_expected_prev);
		$display ("     Real value = %b", Hab_Actual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_Hab_Actual_exp = Hab_Actual_expected_prev;
	end
	if (
		( Hab_muro_expected_prev !== 1'bx ) && ( Hab_muro_prev !== Hab_muro_expected_prev )
		&& ((Hab_muro_expected_prev !== last_Hab_muro_exp) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hab_muro :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hab_muro_expected_prev);
		$display ("     Real value = %b", Hab_muro_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_Hab_muro_exp = Hab_muro_expected_prev;
	end
	if (
		( Hab_sentido_expected_prev !== 1'bx ) && ( Hab_sentido_prev !== Hab_sentido_expected_prev )
		&& ((Hab_sentido_expected_prev !== last_Hab_sentido_exp) ||
			on_first_change[41])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hab_sentido :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hab_sentido_expected_prev);
		$display ("     Real value = %b", Hab_sentido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[41] = 1'b0;
		last_Hab_sentido_exp = Hab_sentido_expected_prev;
	end
	if (
		( MD_expected_prev[0] !== 1'bx ) && ( MD_prev[0] !== MD_expected_prev[0] )
		&& ((MD_expected_prev[0] !== last_MD_exp[0]) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD_expected_prev);
		$display ("     Real value = %b", MD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_MD_exp[0] = MD_expected_prev[0];
	end
	if (
		( MD_expected_prev[1] !== 1'bx ) && ( MD_prev[1] !== MD_expected_prev[1] )
		&& ((MD_expected_prev[1] !== last_MD_exp[1]) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD_expected_prev);
		$display ("     Real value = %b", MD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_MD_exp[1] = MD_expected_prev[1];
	end
	if (
		( MI_expected_prev[0] !== 1'bx ) && ( MI_prev[0] !== MI_expected_prev[0] )
		&& ((MI_expected_prev[0] !== last_MI_exp[0]) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MI[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MI_expected_prev);
		$display ("     Real value = %b", MI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_MI_exp[0] = MI_expected_prev[0];
	end
	if (
		( MI_expected_prev[1] !== 1'bx ) && ( MI_prev[1] !== MI_expected_prev[1] )
		&& ((MI_expected_prev[1] !== last_MI_exp[1]) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MI[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MI_expected_prev);
		$display ("     Real value = %b", MI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_MI_exp[1] = MI_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module matriz_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg Linea;
reg Muro;
reg reset;
// wires                                               
wire [3:0] Abajo;
wire [1:0] accion_out;
wire [3:0] actual;
wire [3:0] Adelante;
wire [3:0] Arriba;
wire [3:0] Atras;
wire [3:0] C0;
wire c1;
wire [3:0] C2;
wire [3:0] C3;
wire [3:0] C4;
wire [3:0] C5;
wire [3:0] C6;
wire [3:0] C7;
wire [3:0] C8;
wire [3:0] C9;
wire [3:0] C10;
wire [3:0] C11;
wire [3:0] C12;
wire [3:0] C13;
wire [3:0] C14;
wire [3:0] C15;
wire [3:0] CE1;
wire D_Abajo;
wire D_Adelante;
wire D_Arriba;
wire D_Atras;
wire [3:0] dir_Abajo;
wire [3:0] dir_Adelante;
wire [3:0] dir_Arriba;
wire [3:0] dir_Atras;
wire ena_Ab;
wire ena_Ad;
wire ena_Ar;
wire ena_At;
wire fin;
wire [1:0] H;
wire Hab_accion;
wire Hab_Actual;
wire Hab_muro;
wire Hab_sentido;
wire [1:0] MD;
wire [1:0] MI;
wire [1:0] sentido;
wire [1:0] sentido_nw;
wire Y15;

wire sampler;                             

// assign statements (if any)                          
matriz i1 (
// port map - connection between master ports and signals/registers   
	.Abajo(Abajo),
	.accion_out(accion_out),
	.actual(actual),
	.Adelante(Adelante),
	.Arriba(Arriba),
	.Atras(Atras),
	.C0(C0),
	.c1(c1),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.C5(C5),
	.C6(C6),
	.C7(C7),
	.C8(C8),
	.C9(C9),
	.C10(C10),
	.C11(C11),
	.C12(C12),
	.C13(C13),
	.C14(C14),
	.C15(C15),
	.CE1(CE1),
	.clk(clk),
	.D_Abajo(D_Abajo),
	.D_Adelante(D_Adelante),
	.D_Arriba(D_Arriba),
	.D_Atras(D_Atras),
	.dir_Abajo(dir_Abajo),
	.dir_Adelante(dir_Adelante),
	.dir_Arriba(dir_Arriba),
	.dir_Atras(dir_Atras),
	.ena_Ab(ena_Ab),
	.ena_Ad(ena_Ad),
	.ena_Ar(ena_Ar),
	.ena_At(ena_At),
	.fin(fin),
	.H(H),
	.Hab_accion(Hab_accion),
	.Hab_Actual(Hab_Actual),
	.Hab_muro(Hab_muro),
	.Hab_sentido(Hab_sentido),
	.Linea(Linea),
	.MD(MD),
	.MI(MI),
	.Muro(Muro),
	.reset(reset),
	.sentido(sentido),
	.sentido_nw(sentido_nw),
	.Y15(Y15)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #10000 1'b0;
end 

// Linea
initial
begin
	Linea = 1'b0;
end 

// Muro
initial
begin
	Muro = 1'b0;
	Muro = #440000 1'b1;
	Muro = #50000 1'b0;
	Muro = #360000 1'b1;
	Muro = #70000 1'b0;
end 

matriz_vlg_sample_tst tb_sample (
	.clk(clk),
	.Linea(Linea),
	.Muro(Muro),
	.reset(reset),
	.sampler_tx(sampler)
);

matriz_vlg_check_tst tb_out(
	.Abajo(Abajo),
	.accion_out(accion_out),
	.actual(actual),
	.Adelante(Adelante),
	.Arriba(Arriba),
	.Atras(Atras),
	.C0(C0),
	.c1(c1),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.C5(C5),
	.C6(C6),
	.C7(C7),
	.C8(C8),
	.C9(C9),
	.C10(C10),
	.C11(C11),
	.C12(C12),
	.C13(C13),
	.C14(C14),
	.C15(C15),
	.CE1(CE1),
	.D_Abajo(D_Abajo),
	.D_Adelante(D_Adelante),
	.D_Arriba(D_Arriba),
	.D_Atras(D_Atras),
	.dir_Abajo(dir_Abajo),
	.dir_Adelante(dir_Adelante),
	.dir_Arriba(dir_Arriba),
	.dir_Atras(dir_Atras),
	.ena_Ab(ena_Ab),
	.ena_Ad(ena_Ad),
	.ena_Ar(ena_Ar),
	.ena_At(ena_At),
	.fin(fin),
	.H(H),
	.Hab_accion(Hab_accion),
	.Hab_Actual(Hab_Actual),
	.Hab_muro(Hab_muro),
	.Hab_sentido(Hab_sentido),
	.MD(MD),
	.MI(MI),
	.sentido(sentido),
	.sentido_nw(sentido_nw),
	.Y15(Y15),
	.sampler_rx(sampler)
);
endmodule

