// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/22/2024 11:46:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    matriz
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module matriz_vlg_sample_tst(
	ADC_DOUT,
	clk,
	El_reset,
	Linea,
	Muro,
	sampler_tx
);
input  ADC_DOUT;
input  clk;
input  El_reset;
input  Linea;
input  Muro;
output sampler_tx;

reg sample;
time current_time;
always @(ADC_DOUT or clk or El_reset or Linea or Muro)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module matriz_vlg_check_tst (
	Ab,
	Abajo,
	accion_out,
	actual,
	Ad,
	ADC_CS_N,
	ADC_DIN,
	ADC_SCLK,
	Adelante,
	Ar,
	Arriba,
	At,
	Atras,
	c2,
	C10,
	C11,
	C12,
	C13,
	CH0,
	CH1,
	D_Abajo,
	D_Adelante,
	D_Arriba,
	D_Atras,
	Der_cerca,
	dir_Abajo,
	dir_Adelante,
	dir_Arriba,
	dir_Atras,
	ena_Ab,
	ena_Ad,
	ena_Ar,
	ena_At,
	fin,
	H,
	Hab_accion,
	Hab_Actual,
	Hab_muro,
	Hab_sentido,
	Izq_cerca,
	locked,
	m_Ab,
	m_Ad,
	m_Ar,
	m_At,
	MD,
	MI,
	OUT,
	quieto,
	sentido,
	sentido_nw,
	velD,
	velI,
	sampler_rx
);
input [3:0] Ab;
input [3:0] Abajo;
input [1:0] accion_out;
input [3:0] actual;
input [3:0] Ad;
input  ADC_CS_N;
input  ADC_DIN;
input  ADC_SCLK;
input [3:0] Adelante;
input [3:0] Ar;
input [3:0] Arriba;
input [3:0] At;
input [3:0] Atras;
input  c2;
input [3:0] C10;
input [3:0] C11;
input [3:0] C12;
input [3:0] C13;
input [11:0] CH0;
input [11:0] CH1;
input  D_Abajo;
input  D_Adelante;
input  D_Arriba;
input  D_Atras;
input  Der_cerca;
input [3:0] dir_Abajo;
input [3:0] dir_Adelante;
input [3:0] dir_Arriba;
input [3:0] dir_Atras;
input  ena_Ab;
input  ena_Ad;
input  ena_Ar;
input  ena_At;
input  fin;
input [1:0] H;
input  Hab_accion;
input  Hab_Actual;
input  Hab_muro;
input  Hab_sentido;
input  Izq_cerca;
input  locked;
input  m_Ab;
input  m_Ad;
input  m_Ar;
input  m_At;
input [1:0] MD;
input [1:0] MI;
input  OUT;
input  quieto;
input [1:0] sentido;
input [1:0] sentido_nw;
input  velD;
input  velI;
input sampler_rx;

reg [3:0] Ab_expected;
reg [3:0] Abajo_expected;
reg [1:0] accion_out_expected;
reg [3:0] actual_expected;
reg [3:0] Ad_expected;
reg  ADC_CS_N_expected;
reg  ADC_DIN_expected;
reg  ADC_SCLK_expected;
reg [3:0] Adelante_expected;
reg [3:0] Ar_expected;
reg [3:0] Arriba_expected;
reg [3:0] At_expected;
reg [3:0] Atras_expected;
reg  c2_expected;
reg [3:0] C10_expected;
reg [3:0] C11_expected;
reg [3:0] C12_expected;
reg [3:0] C13_expected;
reg [11:0] CH0_expected;
reg [11:0] CH1_expected;
reg  D_Abajo_expected;
reg  D_Adelante_expected;
reg  D_Arriba_expected;
reg  D_Atras_expected;
reg  Der_cerca_expected;
reg [3:0] dir_Abajo_expected;
reg [3:0] dir_Adelante_expected;
reg [3:0] dir_Arriba_expected;
reg [3:0] dir_Atras_expected;
reg  ena_Ab_expected;
reg  ena_Ad_expected;
reg  ena_Ar_expected;
reg  ena_At_expected;
reg  fin_expected;
reg [1:0] H_expected;
reg  Hab_accion_expected;
reg  Hab_Actual_expected;
reg  Hab_muro_expected;
reg  Hab_sentido_expected;
reg  Izq_cerca_expected;
reg  locked_expected;
reg  m_Ab_expected;
reg  m_Ad_expected;
reg  m_Ar_expected;
reg  m_At_expected;
reg [1:0] MD_expected;
reg [1:0] MI_expected;
reg  OUT_expected;
reg  quieto_expected;
reg [1:0] sentido_expected;
reg [1:0] sentido_nw_expected;
reg  velD_expected;
reg  velI_expected;

reg [3:0] Ab_prev;
reg [3:0] Abajo_prev;
reg [1:0] accion_out_prev;
reg [3:0] actual_prev;
reg [3:0] Ad_prev;
reg  ADC_CS_N_prev;
reg  ADC_DIN_prev;
reg  ADC_SCLK_prev;
reg [3:0] Adelante_prev;
reg [3:0] Ar_prev;
reg [3:0] Arriba_prev;
reg [3:0] At_prev;
reg [3:0] Atras_prev;
reg  c2_prev;
reg [3:0] C10_prev;
reg [3:0] C11_prev;
reg [3:0] C12_prev;
reg [3:0] C13_prev;
reg [11:0] CH0_prev;
reg [11:0] CH1_prev;
reg  D_Abajo_prev;
reg  D_Adelante_prev;
reg  D_Arriba_prev;
reg  D_Atras_prev;
reg  Der_cerca_prev;
reg [3:0] dir_Abajo_prev;
reg [3:0] dir_Adelante_prev;
reg [3:0] dir_Arriba_prev;
reg [3:0] dir_Atras_prev;
reg  ena_Ab_prev;
reg  ena_Ad_prev;
reg  ena_Ar_prev;
reg  ena_At_prev;
reg  fin_prev;
reg [1:0] H_prev;
reg  Hab_accion_prev;
reg  Hab_Actual_prev;
reg  Hab_muro_prev;
reg  Hab_sentido_prev;
reg  Izq_cerca_prev;
reg  locked_prev;
reg  m_Ab_prev;
reg  m_Ad_prev;
reg  m_Ar_prev;
reg  m_At_prev;
reg [1:0] MD_prev;
reg [1:0] MI_prev;
reg  OUT_prev;
reg  quieto_prev;
reg [1:0] sentido_prev;
reg [1:0] sentido_nw_prev;
reg  velD_prev;
reg  velI_prev;

reg [1:0] accion_out_expected_prev;
reg [3:0] actual_expected_prev;

reg [1:0] last_accion_out_exp;
reg [3:0] last_actual_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:53] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 53'b1;
end

// update real /o prevs

always @(trigger)
begin
	Ab_prev = Ab;
	Abajo_prev = Abajo;
	accion_out_prev = accion_out;
	actual_prev = actual;
	Ad_prev = Ad;
	ADC_CS_N_prev = ADC_CS_N;
	ADC_DIN_prev = ADC_DIN;
	ADC_SCLK_prev = ADC_SCLK;
	Adelante_prev = Adelante;
	Ar_prev = Ar;
	Arriba_prev = Arriba;
	At_prev = At;
	Atras_prev = Atras;
	c2_prev = c2;
	C10_prev = C10;
	C11_prev = C11;
	C12_prev = C12;
	C13_prev = C13;
	CH0_prev = CH0;
	CH1_prev = CH1;
	D_Abajo_prev = D_Abajo;
	D_Adelante_prev = D_Adelante;
	D_Arriba_prev = D_Arriba;
	D_Atras_prev = D_Atras;
	Der_cerca_prev = Der_cerca;
	dir_Abajo_prev = dir_Abajo;
	dir_Adelante_prev = dir_Adelante;
	dir_Arriba_prev = dir_Arriba;
	dir_Atras_prev = dir_Atras;
	ena_Ab_prev = ena_Ab;
	ena_Ad_prev = ena_Ad;
	ena_Ar_prev = ena_Ar;
	ena_At_prev = ena_At;
	fin_prev = fin;
	H_prev = H;
	Hab_accion_prev = Hab_accion;
	Hab_Actual_prev = Hab_Actual;
	Hab_muro_prev = Hab_muro;
	Hab_sentido_prev = Hab_sentido;
	Izq_cerca_prev = Izq_cerca;
	locked_prev = locked;
	m_Ab_prev = m_Ab;
	m_Ad_prev = m_Ad;
	m_Ar_prev = m_Ar;
	m_At_prev = m_At;
	MD_prev = MD;
	MI_prev = MI;
	OUT_prev = OUT;
	quieto_prev = quieto;
	sentido_prev = sentido;
	sentido_nw_prev = sentido_nw;
	velD_prev = velD;
	velI_prev = velI;
end

// update expected /o prevs

always @(trigger)
begin
	accion_out_expected_prev = accion_out_expected;
	actual_expected_prev = actual_expected;
end


// expected actual[ 3 ]
initial
begin
	actual_expected[3] = 1'bX;
	actual_expected[3] = #999000 1'b0;
end 
// expected actual[ 2 ]
initial
begin
	actual_expected[2] = 1'bX;
	actual_expected[2] = #999000 1'b0;
end 
// expected actual[ 1 ]
initial
begin
	actual_expected[1] = 1'bX;
	actual_expected[1] = #999000 1'b0;
end 
// expected actual[ 0 ]
initial
begin
	actual_expected[0] = 1'bX;
	actual_expected[0] = #999000 1'b0;
end 
// expected accion_out[ 1 ]
initial
begin
	accion_out_expected[1] = 1'bX;
	accion_out_expected[1] = #999000 1'b0;
end 
// expected accion_out[ 0 ]
initial
begin
	accion_out_expected[0] = 1'bX;
	accion_out_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(Ab_expected or Ab or Abajo_expected or Abajo or accion_out_expected or accion_out or actual_expected or actual or Ad_expected or Ad or ADC_CS_N_expected or ADC_CS_N or ADC_DIN_expected or ADC_DIN or ADC_SCLK_expected or ADC_SCLK or Adelante_expected or Adelante or Ar_expected or Ar or Arriba_expected or Arriba or At_expected or At or Atras_expected or Atras or c2_expected or c2 or C10_expected or C10 or C11_expected or C11 or C12_expected or C12 or C13_expected or C13 or CH0_expected or CH0 or CH1_expected or CH1 or D_Abajo_expected or D_Abajo or D_Adelante_expected or D_Adelante or D_Arriba_expected or D_Arriba or D_Atras_expected or D_Atras or Der_cerca_expected or Der_cerca or dir_Abajo_expected or dir_Abajo or dir_Adelante_expected or dir_Adelante or dir_Arriba_expected or dir_Arriba or dir_Atras_expected or dir_Atras or ena_Ab_expected or ena_Ab or ena_Ad_expected or ena_Ad or ena_Ar_expected or ena_Ar or ena_At_expected or ena_At or fin_expected or fin or H_expected or H or Hab_accion_expected or Hab_accion or Hab_Actual_expected or Hab_Actual or Hab_muro_expected or Hab_muro or Hab_sentido_expected or Hab_sentido or Izq_cerca_expected or Izq_cerca or locked_expected or locked or m_Ab_expected or m_Ab or m_Ad_expected or m_Ad or m_Ar_expected or m_Ar or m_At_expected or m_At or MD_expected or MD or MI_expected or MI or OUT_expected or OUT or quieto_expected or quieto or sentido_expected or sentido or sentido_nw_expected or sentido_nw or velD_expected or velD or velI_expected or velI)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Ab = %b | expected Abajo = %b | expected accion_out = %b | expected actual = %b | expected Ad = %b | expected ADC_CS_N = %b | expected ADC_DIN = %b | expected ADC_SCLK = %b | expected Adelante = %b | expected Ar = %b | expected Arriba = %b | expected At = %b | expected Atras = %b | expected c2 = %b | expected C10 = %b | expected C11 = %b | expected C12 = %b | expected C13 = %b | expected CH0 = %b | expected CH1 = %b | expected D_Abajo = %b | expected D_Adelante = %b | expected D_Arriba = %b | expected D_Atras = %b | expected Der_cerca = %b | expected dir_Abajo = %b | expected dir_Adelante = %b | expected dir_Arriba = %b | expected dir_Atras = %b | expected ena_Ab = %b | expected ena_Ad = %b | expected ena_Ar = %b | expected ena_At = %b | expected fin = %b | expected H = %b | expected Hab_accion = %b | expected Hab_Actual = %b | expected Hab_muro = %b | expected Hab_sentido = %b | expected Izq_cerca = %b | expected locked = %b | expected m_Ab = %b | expected m_Ad = %b | expected m_Ar = %b | expected m_At = %b | expected MD = %b | expected MI = %b | expected OUT = %b | expected quieto = %b | expected sentido = %b | expected sentido_nw = %b | expected velD = %b | expected velI = %b | ",Ab_expected_prev,Abajo_expected_prev,accion_out_expected_prev,actual_expected_prev,Ad_expected_prev,ADC_CS_N_expected_prev,ADC_DIN_expected_prev,ADC_SCLK_expected_prev,Adelante_expected_prev,Ar_expected_prev,Arriba_expected_prev,At_expected_prev,Atras_expected_prev,c2_expected_prev,C10_expected_prev,C11_expected_prev,C12_expected_prev,C13_expected_prev,CH0_expected_prev,CH1_expected_prev,D_Abajo_expected_prev,D_Adelante_expected_prev,D_Arriba_expected_prev,D_Atras_expected_prev,Der_cerca_expected_prev,dir_Abajo_expected_prev,dir_Adelante_expected_prev,dir_Arriba_expected_prev,dir_Atras_expected_prev,ena_Ab_expected_prev,ena_Ad_expected_prev,ena_Ar_expected_prev,ena_At_expected_prev,fin_expected_prev,H_expected_prev,Hab_accion_expected_prev,Hab_Actual_expected_prev,Hab_muro_expected_prev,Hab_sentido_expected_prev,Izq_cerca_expected_prev,locked_expected_prev,m_Ab_expected_prev,m_Ad_expected_prev,m_Ar_expected_prev,m_At_expected_prev,MD_expected_prev,MI_expected_prev,OUT_expected_prev,quieto_expected_prev,sentido_expected_prev,sentido_nw_expected_prev,velD_expected_prev,velI_expected_prev);
	$display("| real Ab = %b | real Abajo = %b | real accion_out = %b | real actual = %b | real Ad = %b | real ADC_CS_N = %b | real ADC_DIN = %b | real ADC_SCLK = %b | real Adelante = %b | real Ar = %b | real Arriba = %b | real At = %b | real Atras = %b | real c2 = %b | real C10 = %b | real C11 = %b | real C12 = %b | real C13 = %b | real CH0 = %b | real CH1 = %b | real D_Abajo = %b | real D_Adelante = %b | real D_Arriba = %b | real D_Atras = %b | real Der_cerca = %b | real dir_Abajo = %b | real dir_Adelante = %b | real dir_Arriba = %b | real dir_Atras = %b | real ena_Ab = %b | real ena_Ad = %b | real ena_Ar = %b | real ena_At = %b | real fin = %b | real H = %b | real Hab_accion = %b | real Hab_Actual = %b | real Hab_muro = %b | real Hab_sentido = %b | real Izq_cerca = %b | real locked = %b | real m_Ab = %b | real m_Ad = %b | real m_Ar = %b | real m_At = %b | real MD = %b | real MI = %b | real OUT = %b | real quieto = %b | real sentido = %b | real sentido_nw = %b | real velD = %b | real velI = %b | ",Ab_prev,Abajo_prev,accion_out_prev,actual_prev,Ad_prev,ADC_CS_N_prev,ADC_DIN_prev,ADC_SCLK_prev,Adelante_prev,Ar_prev,Arriba_prev,At_prev,Atras_prev,c2_prev,C10_prev,C11_prev,C12_prev,C13_prev,CH0_prev,CH1_prev,D_Abajo_prev,D_Adelante_prev,D_Arriba_prev,D_Atras_prev,Der_cerca_prev,dir_Abajo_prev,dir_Adelante_prev,dir_Arriba_prev,dir_Atras_prev,ena_Ab_prev,ena_Ad_prev,ena_Ar_prev,ena_At_prev,fin_prev,H_prev,Hab_accion_prev,Hab_Actual_prev,Hab_muro_prev,Hab_sentido_prev,Izq_cerca_prev,locked_prev,m_Ab_prev,m_Ad_prev,m_Ar_prev,m_At_prev,MD_prev,MI_prev,OUT_prev,quieto_prev,sentido_prev,sentido_nw_prev,velD_prev,velI_prev);
`endif
	if (
		( accion_out_expected_prev[0] !== 1'bx ) && ( accion_out_prev[0] !== accion_out_expected_prev[0] )
		&& ((accion_out_expected_prev[0] !== last_accion_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accion_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accion_out_expected_prev);
		$display ("     Real value = %b", accion_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_accion_out_exp[0] = accion_out_expected_prev[0];
	end
	if (
		( accion_out_expected_prev[1] !== 1'bx ) && ( accion_out_prev[1] !== accion_out_expected_prev[1] )
		&& ((accion_out_expected_prev[1] !== last_accion_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accion_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accion_out_expected_prev);
		$display ("     Real value = %b", accion_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_accion_out_exp[1] = accion_out_expected_prev[1];
	end
	if (
		( actual_expected_prev[0] !== 1'bx ) && ( actual_prev[0] !== actual_expected_prev[0] )
		&& ((actual_expected_prev[0] !== last_actual_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port actual[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", actual_expected_prev);
		$display ("     Real value = %b", actual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_actual_exp[0] = actual_expected_prev[0];
	end
	if (
		( actual_expected_prev[1] !== 1'bx ) && ( actual_prev[1] !== actual_expected_prev[1] )
		&& ((actual_expected_prev[1] !== last_actual_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port actual[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", actual_expected_prev);
		$display ("     Real value = %b", actual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_actual_exp[1] = actual_expected_prev[1];
	end
	if (
		( actual_expected_prev[2] !== 1'bx ) && ( actual_prev[2] !== actual_expected_prev[2] )
		&& ((actual_expected_prev[2] !== last_actual_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port actual[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", actual_expected_prev);
		$display ("     Real value = %b", actual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_actual_exp[2] = actual_expected_prev[2];
	end
	if (
		( actual_expected_prev[3] !== 1'bx ) && ( actual_prev[3] !== actual_expected_prev[3] )
		&& ((actual_expected_prev[3] !== last_actual_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port actual[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", actual_expected_prev);
		$display ("     Real value = %b", actual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_actual_exp[3] = actual_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module matriz_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADC_DOUT;
reg clk;
reg El_reset;
reg Linea;
reg Muro;
// wires                                               
wire [3:0] Ab;
wire [3:0] Abajo;
wire [1:0] accion_out;
wire [3:0] actual;
wire [3:0] Ad;
wire ADC_CS_N;
wire ADC_DIN;
wire ADC_SCLK;
wire [3:0] Adelante;
wire [3:0] Ar;
wire [3:0] Arriba;
wire [3:0] At;
wire [3:0] Atras;
wire c2;
wire [3:0] C10;
wire [3:0] C11;
wire [3:0] C12;
wire [3:0] C13;
wire [11:0] CH0;
wire [11:0] CH1;
wire D_Abajo;
wire D_Adelante;
wire D_Arriba;
wire D_Atras;
wire Der_cerca;
wire [3:0] dir_Abajo;
wire [3:0] dir_Adelante;
wire [3:0] dir_Arriba;
wire [3:0] dir_Atras;
wire ena_Ab;
wire ena_Ad;
wire ena_Ar;
wire ena_At;
wire fin;
wire [1:0] H;
wire Hab_accion;
wire Hab_Actual;
wire Hab_muro;
wire Hab_sentido;
wire Izq_cerca;
wire locked;
wire m_Ab;
wire m_Ad;
wire m_Ar;
wire m_At;
wire [1:0] MD;
wire [1:0] MI;
wire OUT;
wire quieto;
wire [1:0] sentido;
wire [1:0] sentido_nw;
wire velD;
wire velI;

wire sampler;                             

// assign statements (if any)                          
matriz i1 (
// port map - connection between master ports and signals/registers   
	.Ab(Ab),
	.Abajo(Abajo),
	.accion_out(accion_out),
	.actual(actual),
	.Ad(Ad),
	.ADC_CS_N(ADC_CS_N),
	.ADC_DIN(ADC_DIN),
	.ADC_DOUT(ADC_DOUT),
	.ADC_SCLK(ADC_SCLK),
	.Adelante(Adelante),
	.Ar(Ar),
	.Arriba(Arriba),
	.At(At),
	.Atras(Atras),
	.c2(c2),
	.C10(C10),
	.C11(C11),
	.C12(C12),
	.C13(C13),
	.CH0(CH0),
	.CH1(CH1),
	.clk(clk),
	.D_Abajo(D_Abajo),
	.D_Adelante(D_Adelante),
	.D_Arriba(D_Arriba),
	.D_Atras(D_Atras),
	.Der_cerca(Der_cerca),
	.dir_Abajo(dir_Abajo),
	.dir_Adelante(dir_Adelante),
	.dir_Arriba(dir_Arriba),
	.dir_Atras(dir_Atras),
	.El_reset(El_reset),
	.ena_Ab(ena_Ab),
	.ena_Ad(ena_Ad),
	.ena_Ar(ena_Ar),
	.ena_At(ena_At),
	.fin(fin),
	.H(H),
	.Hab_accion(Hab_accion),
	.Hab_Actual(Hab_Actual),
	.Hab_muro(Hab_muro),
	.Hab_sentido(Hab_sentido),
	.Izq_cerca(Izq_cerca),
	.Linea(Linea),
	.locked(locked),
	.m_Ab(m_Ab),
	.m_Ad(m_Ad),
	.m_Ar(m_Ar),
	.m_At(m_At),
	.MD(MD),
	.MI(MI),
	.Muro(Muro),
	.OUT(OUT),
	.quieto(quieto),
	.sentido(sentido),
	.sentido_nw(sentido_nw),
	.velD(velD),
	.velI(velI)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// El_reset
initial
begin
	El_reset = 1'b1;
	El_reset = #160000 1'b0;
end 

// Muro
initial
begin
	Muro = 1'b1;
end 

// Linea
initial
begin
	Linea = 1'b1;
	Linea = #4320000 1'b0;
	Linea = #480000 1'b1;
	Linea = #3520000 1'b0;
	Linea = #480000 1'b1;
end 

matriz_vlg_sample_tst tb_sample (
	.ADC_DOUT(ADC_DOUT),
	.clk(clk),
	.El_reset(El_reset),
	.Linea(Linea),
	.Muro(Muro),
	.sampler_tx(sampler)
);

matriz_vlg_check_tst tb_out(
	.Ab(Ab),
	.Abajo(Abajo),
	.accion_out(accion_out),
	.actual(actual),
	.Ad(Ad),
	.ADC_CS_N(ADC_CS_N),
	.ADC_DIN(ADC_DIN),
	.ADC_SCLK(ADC_SCLK),
	.Adelante(Adelante),
	.Ar(Ar),
	.Arriba(Arriba),
	.At(At),
	.Atras(Atras),
	.c2(c2),
	.C10(C10),
	.C11(C11),
	.C12(C12),
	.C13(C13),
	.CH0(CH0),
	.CH1(CH1),
	.D_Abajo(D_Abajo),
	.D_Adelante(D_Adelante),
	.D_Arriba(D_Arriba),
	.D_Atras(D_Atras),
	.Der_cerca(Der_cerca),
	.dir_Abajo(dir_Abajo),
	.dir_Adelante(dir_Adelante),
	.dir_Arriba(dir_Arriba),
	.dir_Atras(dir_Atras),
	.ena_Ab(ena_Ab),
	.ena_Ad(ena_Ad),
	.ena_Ar(ena_Ar),
	.ena_At(ena_At),
	.fin(fin),
	.H(H),
	.Hab_accion(Hab_accion),
	.Hab_Actual(Hab_Actual),
	.Hab_muro(Hab_muro),
	.Hab_sentido(Hab_sentido),
	.Izq_cerca(Izq_cerca),
	.locked(locked),
	.m_Ab(m_Ab),
	.m_Ad(m_Ad),
	.m_Ar(m_Ar),
	.m_At(m_At),
	.MD(MD),
	.MI(MI),
	.OUT(OUT),
	.quieto(quieto),
	.sentido(sentido),
	.sentido_nw(sentido_nw),
	.velD(velD),
	.velI(velI),
	.sampler_rx(sampler)
);
endmodule

